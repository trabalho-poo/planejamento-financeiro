diff --git a/.classpath b/.classpath
index 1808c1b..384293a 100644
--- a/.classpath
+++ b/.classpath
@@ -1,9 +1,9 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry kind="lib" path="jgoodies-common-1.8.0.jar" sourcepath="jgoodies-common-1.8.0-sources.jar"/>
-	<classpathentry kind="lib" path="jgoodies-forms-1.8.0.jar" sourcepath="jgoodies-forms-1.8.0-sources.jar"/>
-	<classpathentry kind="lib" path="/Users/onatalia86/eclipse-workspace/mysql-connector-java-8.0.16/mysql-connector-java-8.0.16.jar"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
+	<classpathentry kind="lib" path="jgoodies-common-1.8.0.jar" sourcepath="jgoodies-common-1.8.0-sources.jar"/>
+	<classpathentry kind="lib" path="jgoodies-forms-1.8.0.jar" sourcepath="jgoodies-forms-1.8.0-sources.jar"/>
+	<classpathentry kind="lib" path="/Users/onatalia86/eclipse-workspace/mysql-connector-java-8.0.16/mysql-connector-java-8.0.16.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/dataBase.sql b/dataBase.sql
new file mode 100644
index 0000000..e47398e
--- /dev/null
+++ b/dataBase.sql
@@ -0,0 +1,12 @@
+use planejamentoFinanceiropma__central_columnspma__central_columnspma__central_columns;
+CREATE TABLE Usuario(
+  idUsuario INT NOT NULL,
+  nome VARCHAR(45) NOT NULL,
+  emial VARCHAR(45) NOT NULL,
+  senha VARCHAR(45) NOT NULL,
+  rg VARCHAR(45) NOT NULL,
+  cpf VARCHAR(45) NOT NULL,
+  sexo ENUM('MASCULINO', 'FEMININO') NOT NULL,
+  PRIMARY KEY (`idUsuario`))
+ENGINE = InnoDB;
+
diff --git a/mysql-connector-java-8.0.16.jar b/mysql-connector-java-8.0.16.jar
new file mode 100644
index 0000000..355047b
--- /dev/null
+++ b/mysql-connector-java-8.0.16.jar
@@ -0,0 +1,271 @@
+diff --git a/dataBase.sql b/dataBase.sql
+new file mode 100644
+index 0000000..e47398e
+--- /dev/null
++++ b/dataBase.sql
+@@ -0,0 +1,12 @@
++use planejamentoFinanceiropma__central_columnspma__central_columnspma__central_columns;
++CREATE TABLE Usuario(
++  idUsuario INT NOT NULL,
++  nome VARCHAR(45) NOT NULL,
++  emial VARCHAR(45) NOT NULL,
++  senha VARCHAR(45) NOT NULL,
++  rg VARCHAR(45) NOT NULL,
++  cpf VARCHAR(45) NOT NULL,
++  sexo ENUM('MASCULINO', 'FEMININO') NOT NULL,
++  PRIMARY KEY (`idUsuario`))
++ENGINE = InnoDB;
++
+diff --git a/mysql-connector-java-8.0.16.jar b/mysql-connector-java-8.0.16.jar
+new file mode 100644
+index 0000000..acd5ea6
+--- /dev/null
++++ b/mysql-connector-java-8.0.16.jar
+Binary files differ
+diff --git a/planejamentoFinaceiro Model.mwb b/planejamentoFinaceiro Model.mwb
+new file mode 100644
+index 0000000..3716cfd
+--- /dev/null
++++ b/planejamentoFinaceiro Model.mwb
+Binary files differ
+diff --git a/planejamentoFinaceiro Model.mwb.bak b/planejamentoFinaceiro Model.mwb.bak
+new file mode 100644
+index 0000000..d76668b
+--- /dev/null
++++ b/planejamentoFinaceiro Model.mwb.bak
+Binary files differ
+diff --git a/src/er.sql b/src/er.sql
+new file mode 100644
+index 0000000..273f08f
+--- /dev/null
++++ b/src/er.sql
+@@ -0,0 +1,87 @@
++-- MySQL Script generated by MySQL Workbench
++-- Sat Jun 29 12:06:46 2019
++-- Model: New Model    Version: 1.0
++-- MySQL Workbench Forward Engineering
++
++SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
++SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
++SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
++
++-- -----------------------------------------------------
++-- Schema planjamentoFinanceiro
++-- -----------------------------------------------------
++
++-- -----------------------------------------------------
++-- Schema planjamentoFinanceiro
++-- -----------------------------------------------------
++CREATE SCHEMA IF NOT EXISTS `planjamentoFinanceiro` DEFAULT CHARACTER SET utf8 ;
++USE `planjamentoFinanceiro` ;
++
++-- -----------------------------------------------------
++-- Table `planjamentoFinanceiro`.`Usuario`
++-- -----------------------------------------------------
++CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Usuario` (
++  `idUsuario` INT NOT NULL,
++  `Nome` VARCHAR(45) NOT NULL,
++  `emial` VARCHAR(45) NOT NULL,
++  `senha` VARCHAR(45) NOT NULL,
++  `rg` VARCHAR(45) NOT NULL,
++  `cpf` VARCHAR(45) NOT NULL,
++  `sexo` ENUM('MASCULINO', 'FEMININO') NOT NULL,
++  PRIMARY KEY (`idUsuario`))
++ENGINE = InnoDB;
++
++
++-- -----------------------------------------------------
++-- Table `planjamentoFinanceiro`.`Movimentacao`
++-- -----------------------------------------------------
++CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Movimentacao` (
++  `idMovimentacao` INT NOT NULL,
++  `valor` DOUBLE NOT NULL,
++  `descricao` VARCHAR(45) NOT NULL,
++  `Usuario_idUsuario` INT NOT NULL,
++  `tipo` ENUM('Receita', 'Desoesa') NOT NULL,
++  `tipoReceita` ENUM('SALARIO', 'OUTROS') NOT NULL,
++  `tipoDespesa` ENUM('ACADEMIA', 'AGUA', 'ALUGUEL', 'CLUBE', 'INTERNET', 'TELEFONE', 'LUZ', 'SUPERMERCADO', 'OUTROS') NULL,
++  `Movimentacaocol` VARCHAR(45) NULL,
++  PRIMARY KEY (`Usuario_idUsuario`, `idMovimentacao`),
++  INDEX `fk_Movimentacao_Usuario_idx` (`Usuario_idUsuario` ASC),
++  CONSTRAINT `fk_Movimentacao_Usuario`
++    FOREIGN KEY (`Usuario_idUsuario`)
++    REFERENCES `planjamentoFinanceiro`.`Usuario` (`idUsuario`)
++    ON DELETE NO ACTION
++    ON UPDATE NO ACTION)
++ENGINE = InnoDB;
++
++
++-- -----------------------------------------------------
++-- Table `planjamentoFinanceiro`.`Data`
++-- -----------------------------------------------------
++CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Data` (
++  `idData` INT NOT NULL,
++  `dia` INT NULL,
++  `mes` INT NULL,
++  `ano` INT NULL,
++  `Datacol` VARCHAR(45) NULL,
++  `Movimentacao_idMovimentacao` INT NOT NULL,
++  `Movimentacao_Usuario_idUsuario` INT NOT NULL,
++  `Usuario_idUsuario` INT NOT NULL,
++  PRIMARY KEY (`idData`),
++  INDEX `fk_Data_Movimentacao1_idx` (`Movimentacao_idMovimentacao` ASC, `Movimentacao_Usuario_idUsuario` ASC),
++  INDEX `fk_Data_Usuario1_idx` (`Usuario_idUsuario` ASC),
++  CONSTRAINT `fk_Data_Movimentacao1`
++    FOREIGN KEY (`Movimentacao_idMovimentacao` , `Movimentacao_Usuario_idUsuario`)
++    REFERENCES `planjamentoFinanceiro`.`Movimentacao` (`idMovimentacao` , `Usuario_idUsuario`)
++    ON DELETE NO ACTION
++    ON UPDATE NO ACTION,
++  CONSTRAINT `fk_Data_Usuario1`
++    FOREIGN KEY (`Usuario_idUsuario`)
++    REFERENCES `planjamentoFinanceiro`.`Usuario` (`idUsuario`)
++    ON DELETE NO ACTION
++    ON UPDATE NO ACTION)
++ENGINE = InnoDB;
++
++
++SET SQL_MODE=@OLD_SQL_MODE;
++SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
++SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
+diff --git a/src/implementacoes/Uso.java b/src/implementacoes/Uso.java
+index 77476ba..be6aefa 100644
+--- a/src/implementacoes/Uso.java
++++ b/src/implementacoes/Uso.java
+@@ -1,24 +1,24 @@
+-package implementacoes;
+-
+-public class Uso {
+-
+-	public static void main(String[] args) {
+-		// TODO Auto-generated method stub
+-		BancoDeDados bd = new BancoDeDados();
+-		try {
+-			bd.conectar();
+-			if(bd.isConectado()) {
+-				System.out.println("Conectei ao banco de dados");
+-			}else {
+-				System.out.println("Não foi possível conectar ao banco de dados");
+-			}
+-			Usuario _usuario = new Usuario("N", Sexo.FEMININO, new Data("1/1/1995"), "3434607", "14863325797", "onat@gmail.com",
+-			"skxk");
+-			bd.inserirContato(_usuario);
+-		}catch (Exception e) {
+-			System.out.println("Erro: " + e.getMessage());
+-		}
+-		
+-	}
+-
+-}
++package implementacoes;
++
++public class Uso {
++
++	public static void main(String[] args) {
++	
++		BancoDeDados bd = new BancoDeDados();
++		try {
++			bd.conectar();
++			if(bd.isConectado()) {
++				System.out.println("Conectei ao banco de dados");
++			}else {
++				System.out.println("Não foi possível conectar ao banco de dados");
++			}
++			Usuario _usuario = new Usuario("N", Sexo.FEMININO, new Data("1/1/1995"), "3434607", "14863325797", "onat@gmail.com",
++			"skxk");
++			bd.inserirContato(_usuario);
++		}catch (Exception e) {
++			System.out.println("Erro: " + e.getMessage());
++		}
++		
++	}
++
++}
+diff --git a/src/view/teste.java b/src/view/teste.java
+index 59b8f99..51cb20f 100644
+--- a/src/view/teste.java
++++ b/src/view/teste.java
+@@ -1,42 +1,42 @@
+-package view;
+-
+-import java.awt.BorderLayout;
+-import java.awt.EventQueue;
+-
+-import javax.swing.JFrame;
+-import javax.swing.JPanel;
+-import javax.swing.border.EmptyBorder;
+-
+-public class teste extends JFrame {
+-
+-	private JPanel contentPane;
+-
+-	/**
+-	 * Launch the application.
+-	 */
+-	public static void main(String[] args) {
+-		EventQueue.invokeLater(new Runnable() {
+-			public void run() {
+-				try {
+-					teste frame = new teste();
+-					frame.setVisible(true);
+-				} catch (Exception e) {
+-					e.printStackTrace();
+-				}
+-			}
+-		});
+-	}
+-
+-	/**
+-	 * Create the frame.
+-	 */
+-	public teste() {
+-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+-		setBounds(100, 100, 450, 300);
+-		contentPane = new JPanel();
+-		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
+-		contentPane.setLayout(new BorderLayout(0, 0));
+-		setContentPane(contentPane);
+-	}
+-
+-}
++package view;
++
++import java.awt.BorderLayout;
++import java.awt.EventQueue;
++
++import javax.swing.JFrame;
++import javax.swing.JPanel;
++import javax.swing.border.EmptyBorder;
++
++public class teste extends JFrame {
++
++	private JPanel contentPane;
++
++	/**
++	 * Launch the application.
++	 */
++	public static void main(String[] args) {
++		EventQueue.invokeLater(new Runnable() {
++			public void run() {
++				try {
++					teste frame = new teste();
++					frame.setVisible(true);
++				} catch (Exception e) {
++					e.printStackTrace();
++				}
++			}
++		});
++	}
++
++	/**
++	 * Create the frame.
++	 */
++	public teste() {
++		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
++		setBounds(100, 100, 450, 300);
++		contentPane = new JPanel();
++		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
++		contentPane.setLayout(new BorderLayout(0, 0));
++		setContentPane(contentPane);
++	}
++
++}
diff --git a/planejamentoFinaceiro Model.mwb b/planejamentoFinaceiro Model.mwb
new file mode 100644
index 0000000..3716cfd
--- /dev/null
+++ b/planejamentoFinaceiro Model.mwb
Binary files differ
diff --git a/planejamentoFinaceiro Model.mwb.bak b/planejamentoFinaceiro Model.mwb.bak
new file mode 100644
index 0000000..d76668b
--- /dev/null
+++ b/planejamentoFinaceiro Model.mwb.bak
Binary files differ
diff --git a/src/er.sql b/src/er.sql
new file mode 100644
index 0000000..273f08f
--- /dev/null
+++ b/src/er.sql
@@ -0,0 +1,87 @@
+-- MySQL Script generated by MySQL Workbench
+-- Sat Jun 29 12:06:46 2019
+-- Model: New Model    Version: 1.0
+-- MySQL Workbench Forward Engineering
+
+SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
+SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
+SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
+
+-- -----------------------------------------------------
+-- Schema planjamentoFinanceiro
+-- -----------------------------------------------------
+
+-- -----------------------------------------------------
+-- Schema planjamentoFinanceiro
+-- -----------------------------------------------------
+CREATE SCHEMA IF NOT EXISTS `planjamentoFinanceiro` DEFAULT CHARACTER SET utf8 ;
+USE `planjamentoFinanceiro` ;
+
+-- -----------------------------------------------------
+-- Table `planjamentoFinanceiro`.`Usuario`
+-- -----------------------------------------------------
+CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Usuario` (
+  `idUsuario` INT NOT NULL,
+  `Nome` VARCHAR(45) NOT NULL,
+  `emial` VARCHAR(45) NOT NULL,
+  `senha` VARCHAR(45) NOT NULL,
+  `rg` VARCHAR(45) NOT NULL,
+  `cpf` VARCHAR(45) NOT NULL,
+  `sexo` ENUM('MASCULINO', 'FEMININO') NOT NULL,
+  PRIMARY KEY (`idUsuario`))
+ENGINE = InnoDB;
+
+
+-- -----------------------------------------------------
+-- Table `planjamentoFinanceiro`.`Movimentacao`
+-- -----------------------------------------------------
+CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Movimentacao` (
+  `idMovimentacao` INT NOT NULL,
+  `valor` DOUBLE NOT NULL,
+  `descricao` VARCHAR(45) NOT NULL,
+  `Usuario_idUsuario` INT NOT NULL,
+  `tipo` ENUM('Receita', 'Desoesa') NOT NULL,
+  `tipoReceita` ENUM('SALARIO', 'OUTROS') NOT NULL,
+  `tipoDespesa` ENUM('ACADEMIA', 'AGUA', 'ALUGUEL', 'CLUBE', 'INTERNET', 'TELEFONE', 'LUZ', 'SUPERMERCADO', 'OUTROS') NULL,
+  `Movimentacaocol` VARCHAR(45) NULL,
+  PRIMARY KEY (`Usuario_idUsuario`, `idMovimentacao`),
+  INDEX `fk_Movimentacao_Usuario_idx` (`Usuario_idUsuario` ASC),
+  CONSTRAINT `fk_Movimentacao_Usuario`
+    FOREIGN KEY (`Usuario_idUsuario`)
+    REFERENCES `planjamentoFinanceiro`.`Usuario` (`idUsuario`)
+    ON DELETE NO ACTION
+    ON UPDATE NO ACTION)
+ENGINE = InnoDB;
+
+
+-- -----------------------------------------------------
+-- Table `planjamentoFinanceiro`.`Data`
+-- -----------------------------------------------------
+CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Data` (
+  `idData` INT NOT NULL,
+  `dia` INT NULL,
+  `mes` INT NULL,
+  `ano` INT NULL,
+  `Datacol` VARCHAR(45) NULL,
+  `Movimentacao_idMovimentacao` INT NOT NULL,
+  `Movimentacao_Usuario_idUsuario` INT NOT NULL,
+  `Usuario_idUsuario` INT NOT NULL,
+  PRIMARY KEY (`idData`),
+  INDEX `fk_Data_Movimentacao1_idx` (`Movimentacao_idMovimentacao` ASC, `Movimentacao_Usuario_idUsuario` ASC),
+  INDEX `fk_Data_Usuario1_idx` (`Usuario_idUsuario` ASC),
+  CONSTRAINT `fk_Data_Movimentacao1`
+    FOREIGN KEY (`Movimentacao_idMovimentacao` , `Movimentacao_Usuario_idUsuario`)
+    REFERENCES `planjamentoFinanceiro`.`Movimentacao` (`idMovimentacao` , `Usuario_idUsuario`)
+    ON DELETE NO ACTION
+    ON UPDATE NO ACTION,
+  CONSTRAINT `fk_Data_Usuario1`
+    FOREIGN KEY (`Usuario_idUsuario`)
+    REFERENCES `planjamentoFinanceiro`.`Usuario` (`idUsuario`)
+    ON DELETE NO ACTION
+    ON UPDATE NO ACTION)
+ENGINE = InnoDB;
+
+
+SET SQL_MODE=@OLD_SQL_MODE;
+SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
+SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
diff --git a/src/implementacoes/BancoDeDados.java b/src/implementacoes/BancoDeDados.java
index c0083f6..fa9d941 100644
--- a/src/implementacoes/BancoDeDados.java
+++ b/src/implementacoes/BancoDeDados.java
@@ -1,191 +1,191 @@
-package implementacoes;
-
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Statement;
-
-public class BancoDeDados {
-	public static final String PREFIX 		= "jdbc:mysql:";
-	// public static final String HOSTNAME 	= "localhost";
-	public static final String HOSTNAME 	= "127.0.0.1";
-	public static final String PORT 		= "3306";
-	public static final String DATABASE 	= "planejamento";
-	public static final String TIMEZONE 	= "useTimezone=true&serverTimezone=UTC";
-	public static final String USER 		= "root";
-	public static final String PASSWORD 	= "skxkffldk";
-
-	private Connection connection;
-	private Statement statement;
-	private ResultSet resultSet;
-
-	public BancoDeDados() {
-		this.connection = null;
-		this.statement = null;
-		this.resultSet = null;
-	}
-
-
-	public void conectar() throws Exception {
-//		Class.forName("com.mysql.jdbc.Driver");
-		// monta a url do banco (exemplo: jdbc:mysql://localhost:3306/compras?useTimezone=true&serverTimezone=UTC)
-		String url = BancoDeDados.PREFIX + "//" + BancoDeDados.HOSTNAME + ":" + BancoDeDados.PORT + "/" + BancoDeDados.DATABASE + "?" + BancoDeDados.TIMEZONE;
-		// estabele uma conex�o com o banco de dados em 'url'
-		this.connection = DriverManager.getConnection(url,  BancoDeDados.USER, BancoDeDados.PASSWORD);
-		this.statement = this.connection.createStatement();
-	}
-
-	public boolean isConectado() throws Exception{
-		if(this.connection != null)
-			return true;
-		else
-			return false;
-	}
-
-	public void listarUsuarios() {
-		try {
-			String query = "SELECT * FROM usuario ORDER BY nome";
-			this.resultSet = this.statement.executeQuery(query);
-			this.statement = this.connection.createStatement();
-			while(this.resultSet.next()) {
-				StringBuilder resultset = new StringBuilder();
-				resultset.append("\nID: ");
-				resultset.append(this.resultSet.getString("id"));
-				resultset.append(" - Nome: ");
-				resultset.append(this.resultSet.getString("nome"));
-				System.out.println(resultset.toString());
-			}
-		}catch (Exception e){
-			System.out.println("Erro: " + e.getMessage());
-		}
-	}
-
-	public void inserirContato(Usuario _usuario){
-		try{
-			StringBuilder query = new StringBuilder();
-			query.append("INSERT INTO planejamento.Usuario (nome,email,senha,rg,cpf,sexo,dataNascimento_idData) VALUES (");
-			query.append("'");
-			query.append(_usuario.getNome());
-			query.append("','");
-			query.append(_usuario.getEmail());
-			query.append("','");
-			query.append(_usuario.getSenha());
-			query.append("','");
-			query.append(_usuario.getRg());
-			query.append("','");
-			query.append(_usuario.getCpf());
-			query.append("','");
-			query.append(_usuario.getSexo().toString());
-			query.append("','");
-			query.append(idData(_usuario.getDataNascimento()));
-			query.append("');");
-
-			this.statement.executeUpdate(query.toString());
-		}catch (Exception e){
-			System.out.println("Erro: " + e.getMessage());
-		}
-	}
-
-	public void inserirData(Data _data) throws SQLException{
-		StringBuilder query = new StringBuilder();
-		query.append("INSERT INTO planejamento.Data (dia,mes,ano) VALUES (");
-		query.append("'");
-		query.append(_data.getDia());
-		query.append("','");
-		query.append(_data.getMes());
-		query.append("','");
-		query.append(_data.getAno());
-		query.append("');");
-
-		this.statement.executeUpdate(query.toString());
-	}
-
-	public int idData(Data _data) throws SQLException{
-		this.inserirData(_data);
-		String query = "SELECT (idData) from planejamento.Data ORDER BY idData DESC LIMIT 1";
-		this.resultSet = this.statement.executeQuery(query);
-		this.statement = this.connection.createStatement();
-		while(this.resultSet.next()) {
-			StringBuilder resultset = new StringBuilder();
-			resultset.append(this.resultSet.getString("idData"));
-			return Integer.parseInt(resultset.toString());
-		}
-		return 0;
-	}
-
-	public String stringData(int idData) {
-		return "a";
-	}
-
-	public void listarMovimentacoes() {
-		try {
-			String query = "SELECT * FROM planejamento.Movimentacao ORDER BY data";
-			this.resultSet = this.statement.executeQuery(query);
-			this.statement = this.connection.createStatement();
-			while(this.resultSet.next()) {
-				StringBuilder resultset = new StringBuilder();
-				resultset.append("\nID: ");
-				resultset.append(this.resultSet.getString("id"));
-				resultset.append(" - Data: ");
-				resultset.append(this.resultSet.getString("data"));
-				System.out.println(resultset.toString());
-			}
-		}catch (Exception e){
-			System.out.println("Erro: " + e.getMessage());
-		}
-	}
-
-	//Codigo banco de dados:
-//	-- -----------------------------------------------------
-//	-- Table `planejamento`.`Data`
-//	-- -----------------------------------------------------
-//	CREATE TABLE IF NOT EXISTS `planejamento`.`Data` (
-//	  idData INT NOT NULL AUTO_INCREMENT,
-//	  dia INT NULL,
-//	  mes INT NULL,
-//	  ano INT NULL,
-//	  PRIMARY KEY (`idData`)
-//	  );
-//
-//	-- -----------------------------------------------------
-//	-- Table `planejamento`.`Usuario`
-//	-- -----------------------------------------------------
-//	CREATE TABLE IF NOT EXISTS `planejamento`.`Usuario` (
-//	  idUsuario INT NOT NULL AUTO_INCREMENT,
-//	  nome VARCHAR(45) NOT NULL,
-//	  email VARCHAR(45) NOT NULL,
-//	  senha VARCHAR(45) NOT NULL,
-//	  dataNascimento_idData INT NOT NULL,
-//	  FOREIGN KEY (`dataNascimento_idData`)
-//	  REFERENCES `planejamento`.`Data` (`idData`)
-//	  ON DELETE NO ACTION,
-//	  rg VARCHAR(45) NOT NULL,
-//	  cpf VARCHAR(45) NOT NULL,
-//	  sexo ENUM('MASCULINO', 'FEMININO') NOT NULL,
-//	  PRIMARY KEY (`idUsuario`)
-//	  );
-//
-//	-- -----------------------------------------------------
-//	-- Table `planejamento`.`Movimentacao`
-//	-- -----------------------------------------------------
-//	CREATE TABLE IF NOT EXISTS `planejamento`.`Movimentacao` (
-//	  idMovimentacao INT NOT NULL AUTO_INCREMENT,
-//	  valor DOUBLE NOT NULL,
-//	  descricao VARCHAR(45) NOT NULL,
-//	  Usuario_idUsuario INT NOT NULL,
-//	  Data_idData INT NOT NULL,
-//	  tipo ENUM('RECEITA', 'DESPESA') NOT NULL,
-//	  tipoReceita ENUM('SALARIO', 'OUTROS') NULL,
-//	  tipoDespesa ENUM('ACADEMIA', 'AGUA', 'ALUGUEL', 'CLUBE', 'INTERNET', 'TELEFONE', 'LUZ', 'SUPERMERCADO', 'OUTROS') NULL,
-//	  PRIMARY KEY (`idMovimentacao`),
-//	    FOREIGN KEY (`Usuario_idUsuario`)
-//	    REFERENCES `planejamento`.`Usuario` (`idUsuario`)
-//	    ON DELETE NO ACTION,
-//	    FOREIGN KEY (`Data_idData`)
-//	    REFERENCES `planejamento`.`Data` (`idData`)
-//	    ON DELETE NO ACTION
-//	    ON UPDATE NO ACTION);
-
-
-}
+package implementacoes;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+public class BancoDeDados {
+	public static final String PREFIX 		= "jdbc:mysql:";
+	// public static final String HOSTNAME 	= "localhost";
+	public static final String HOSTNAME 	= "127.0.0.1";
+	public static final String PORT 		= "3306";
+	public static final String DATABASE 	= "planejamento";
+	public static final String TIMEZONE 	= "useTimezone=true&serverTimezone=UTC";
+	public static final String USER 		= "root";
+	public static final String PASSWORD 	= "root";
+
+	private Connection connection;
+	private Statement statement;
+	private ResultSet resultSet;
+
+	public BancoDeDados() {
+		this.connection = null;
+		this.statement = null;
+		this.resultSet = null;
+	}
+
+
+	public void conectar() throws Exception {
+//		Class.forName("com.mysql.jdbc.Driver");
+		// monta a url do banco (exemplo: jdbc:mysql://localhost:3306/compras?useTimezone=true&serverTimezone=UTC)
+		String url = BancoDeDados.PREFIX + "//" + BancoDeDados.HOSTNAME + ":" + BancoDeDados.PORT + "/" + BancoDeDados.DATABASE + "?" + BancoDeDados.TIMEZONE;
+		// estabele uma conex�o com o banco de dados em 'url'
+		this.connection = DriverManager.getConnection(url,  BancoDeDados.USER, BancoDeDados.PASSWORD);
+		this.statement = this.connection.createStatement();
+	}
+
+	public boolean isConectado() throws Exception{
+		if(this.connection != null)
+			return true;
+		else
+			return false;
+	}
+
+	public void listarUsuarios() {
+		try {
+			String query = "SELECT * FROM usuario ORDER BY nome";
+			this.resultSet = this.statement.executeQuery(query);
+			this.statement = this.connection.createStatement();
+			while(this.resultSet.next()) {
+				StringBuilder resultset = new StringBuilder();
+				resultset.append("\nID: ");
+				resultset.append(this.resultSet.getString("id"));
+				resultset.append(" - Nome: ");
+				resultset.append(this.resultSet.getString("nome"));
+				System.out.println(resultset.toString());
+			}
+		}catch (Exception e){
+			System.out.println("Erro: " + e.getMessage());
+		}
+	}
+
+	public void inserirContato(Usuario _usuario){
+		try{
+			StringBuilder query = new StringBuilder();
+			query.append("INSERT INTO planejamento.Usuario (nome,email,senha,rg,cpf,sexo,dataNascimento_idData) VALUES (");
+			query.append("'");
+			query.append(_usuario.getNome());
+			query.append("','");
+			query.append(_usuario.getEmail());
+			query.append("','");
+			query.append(_usuario.getSenha());
+			query.append("','");
+			query.append(_usuario.getRg());
+			query.append("','");
+			query.append(_usuario.getCpf());
+			query.append("','");
+			query.append(_usuario.getSexo().toString());
+			query.append("','");
+			query.append(idData(_usuario.getDataNascimento()));
+			query.append("');");
+
+			this.statement.executeUpdate(query.toString());
+		}catch (Exception e){
+			System.out.println("Erro: " + e.getMessage());
+		}
+	}
+
+	public void inserirData(Data _data) throws SQLException{
+		StringBuilder query = new StringBuilder();
+		query.append("INSERT INTO planejamento.Data (dia,mes,ano) VALUES (");
+		query.append("'");
+		query.append(_data.getDia());
+		query.append("','");
+		query.append(_data.getMes());
+		query.append("','");
+		query.append(_data.getAno());
+		query.append("');");
+
+		this.statement.executeUpdate(query.toString());
+	}
+
+	public int idData(Data _data) throws SQLException{
+		this.inserirData(_data);
+		String query = "SELECT (idData) from planejamento.Data ORDER BY idData DESC LIMIT 1";
+		this.resultSet = this.statement.executeQuery(query);
+		this.statement = this.connection.createStatement();
+		while(this.resultSet.next()) {
+			StringBuilder resultset = new StringBuilder();
+			resultset.append(this.resultSet.getString("idData"));
+			return Integer.parseInt(resultset.toString());
+		}
+		return 0;
+	}
+
+	public String stringData(int idData) {
+		return "a";
+	}
+
+	public void listarMovimentacoes() {
+		try {
+			String query = "SELECT * FROM planejamento.Movimentacao ORDER BY data";
+			this.resultSet = this.statement.executeQuery(query);
+			this.statement = this.connection.createStatement();
+			while(this.resultSet.next()) {
+				StringBuilder resultset = new StringBuilder();
+				resultset.append("\nID: ");
+				resultset.append(this.resultSet.getString("id"));
+				resultset.append(" - Data: ");
+				resultset.append(this.resultSet.getString("data"));
+				System.out.println(resultset.toString());
+			}
+		}catch (Exception e){
+			System.out.println("Erro: " + e.getMessage());
+		}
+	}
+
+	//Codigo banco de dados:
+//	-- -----------------------------------------------------
+//	-- Table `planejamento`.`Data`
+//	-- -----------------------------------------------------
+//	CREATE TABLE IF NOT EXISTS `planejamento`.`Data` (
+//	  idData INT NOT NULL AUTO_INCREMENT,
+//	  dia INT NULL,
+//	  mes INT NULL,
+//	  ano INT NULL,
+//	  PRIMARY KEY (`idData`)
+//	  );
+//
+//	-- -----------------------------------------------------
+//	-- Table `planejamento`.`Usuario`
+//	-- -----------------------------------------------------
+//	CREATE TABLE IF NOT EXISTS `planejamento`.`Usuario` (
+//	  idUsuario INT NOT NULL AUTO_INCREMENT,
+//	  nome VARCHAR(45) NOT NULL,
+//	  email VARCHAR(45) NOT NULL,
+//	  senha VARCHAR(45) NOT NULL,
+//	  dataNascimento_idData INT NOT NULL,
+//	  FOREIGN KEY (`dataNascimento_idData`)
+//	  REFERENCES `planejamento`.`Data` (`idData`)
+//	  ON DELETE NO ACTION,
+//	  rg VARCHAR(45) NOT NULL,
+//	  cpf VARCHAR(45) NOT NULL,
+//	  sexo ENUM('MASCULINO', 'FEMININO') NOT NULL,
+//	  PRIMARY KEY (`idUsuario`)
+//	  );
+//
+//	-- -----------------------------------------------------
+//	-- Table `planejamento`.`Movimentacao`
+//	-- -----------------------------------------------------
+//	CREATE TABLE IF NOT EXISTS `planejamento`.`Movimentacao` (
+//	  idMovimentacao INT NOT NULL AUTO_INCREMENT,
+//	  valor DOUBLE NOT NULL,
+//	  descricao VARCHAR(45) NOT NULL,
+//	  Usuario_idUsuario INT NOT NULL,
+//	  Data_idData INT NOT NULL,
+//	  tipo ENUM('RECEITA', 'DESPESA') NOT NULL,
+//	  tipoReceita ENUM('SALARIO', 'OUTROS') NULL,
+//	  tipoDespesa ENUM('ACADEMIA', 'AGUA', 'ALUGUEL', 'CLUBE', 'INTERNET', 'TELEFONE', 'LUZ', 'SUPERMERCADO', 'OUTROS') NULL,
+//	  PRIMARY KEY (`idMovimentacao`),
+//	    FOREIGN KEY (`Usuario_idUsuario`)
+//	    REFERENCES `planejamento`.`Usuario` (`idUsuario`)
+//	    ON DELETE NO ACTION,
+//	    FOREIGN KEY (`Data_idData`)
+//	    REFERENCES `planejamento`.`Data` (`idData`)
+//	    ON DELETE NO ACTION
+//	    ON UPDATE NO ACTION);
+
+
+}
diff --git a/src/implementacoes/Uso.java b/src/implementacoes/Uso.java
index 77476ba..be6aefa 100644
--- a/src/implementacoes/Uso.java
+++ b/src/implementacoes/Uso.java
@@ -1,24 +1,24 @@
-package implementacoes;
-
-public class Uso {
-
-	public static void main(String[] args) {
-		// TODO Auto-generated method stub
-		BancoDeDados bd = new BancoDeDados();
-		try {
-			bd.conectar();
-			if(bd.isConectado()) {
-				System.out.println("Conectei ao banco de dados");
-			}else {
-				System.out.println("Não foi possível conectar ao banco de dados");
-			}
-			Usuario _usuario = new Usuario("N", Sexo.FEMININO, new Data("1/1/1995"), "3434607", "14863325797", "onat@gmail.com",
-			"skxk");
-			bd.inserirContato(_usuario);
-		}catch (Exception e) {
-			System.out.println("Erro: " + e.getMessage());
-		}
-		
-	}
-
-}
+package implementacoes;
+
+public class Uso {
+
+	public static void main(String[] args) {
+	
+		BancoDeDados bd = new BancoDeDados();
+		try {
+			bd.conectar();
+			if(bd.isConectado()) {
+				System.out.println("Conectei ao banco de dados");
+			}else {
+				System.out.println("Não foi possível conectar ao banco de dados");
+			}
+			Usuario _usuario = new Usuario("N", Sexo.FEMININO, new Data("1/1/1995"), "3434607", "14863325797", "onat@gmail.com",
+			"skxk");
+			bd.inserirContato(_usuario);
+		}catch (Exception e) {
+			System.out.println("Erro: " + e.getMessage());
+		}
+		
+	}
+
+}
diff --git a/src/view/teste.java b/src/view/teste.java
index 59b8f99..51cb20f 100644
--- a/src/view/teste.java
+++ b/src/view/teste.java
@@ -1,42 +1,42 @@
-package view;
-
-import java.awt.BorderLayout;
-import java.awt.EventQueue;
-
-import javax.swing.JFrame;
-import javax.swing.JPanel;
-import javax.swing.border.EmptyBorder;
-
-public class teste extends JFrame {
-
-	private JPanel contentPane;
-
-	/**
-	 * Launch the application.
-	 */
-	public static void main(String[] args) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					teste frame = new teste();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame.
-	 */
-	public teste() {
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		setBounds(100, 100, 450, 300);
-		contentPane = new JPanel();
-		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
-		contentPane.setLayout(new BorderLayout(0, 0));
-		setContentPane(contentPane);
-	}
-
-}
+package view;
+
+import java.awt.BorderLayout;
+import java.awt.EventQueue;
+
+import javax.swing.JFrame;
+import javax.swing.JPanel;
+import javax.swing.border.EmptyBorder;
+
+public class teste extends JFrame {
+
+	private JPanel contentPane;
+
+	/**
+	 * Launch the application.
+	 */
+	public static void main(String[] args) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					teste frame = new teste();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame.
+	 */
+	public teste() {
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		setBounds(100, 100, 450, 300);
+		contentPane = new JPanel();
+		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
+		contentPane.setLayout(new BorderLayout(0, 0));
+		setContentPane(contentPane);
+	}
+
+}
