diff --git a/dataBase.sql b/dataBase.sql
new file mode 100644
index 0000000..e47398e
--- /dev/null
+++ b/dataBase.sql
@@ -0,0 +1,12 @@
+use planejamentoFinanceiropma__central_columnspma__central_columnspma__central_columns;
+CREATE TABLE Usuario(
+  idUsuario INT NOT NULL,
+  nome VARCHAR(45) NOT NULL,
+  emial VARCHAR(45) NOT NULL,
+  senha VARCHAR(45) NOT NULL,
+  rg VARCHAR(45) NOT NULL,
+  cpf VARCHAR(45) NOT NULL,
+  sexo ENUM('MASCULINO', 'FEMININO') NOT NULL,
+  PRIMARY KEY (`idUsuario`))
+ENGINE = InnoDB;
+
diff --git a/mysql-connector-java-8.0.16.jar b/mysql-connector-java-8.0.16.jar
new file mode 100644
index 0000000..acd5ea6
--- /dev/null
+++ b/mysql-connector-java-8.0.16.jar
Binary files differ
diff --git a/planejamentoFinaceiro Model.mwb b/planejamentoFinaceiro Model.mwb
new file mode 100644
index 0000000..3716cfd
--- /dev/null
+++ b/planejamentoFinaceiro Model.mwb
Binary files differ
diff --git a/planejamentoFinaceiro Model.mwb.bak b/planejamentoFinaceiro Model.mwb.bak
new file mode 100644
index 0000000..d76668b
--- /dev/null
+++ b/planejamentoFinaceiro Model.mwb.bak
Binary files differ
diff --git a/src/er.sql b/src/er.sql
new file mode 100644
index 0000000..273f08f
--- /dev/null
+++ b/src/er.sql
@@ -0,0 +1,87 @@
+-- MySQL Script generated by MySQL Workbench
+-- Sat Jun 29 12:06:46 2019
+-- Model: New Model    Version: 1.0
+-- MySQL Workbench Forward Engineering
+
+SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
+SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
+SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
+
+-- -----------------------------------------------------
+-- Schema planjamentoFinanceiro
+-- -----------------------------------------------------
+
+-- -----------------------------------------------------
+-- Schema planjamentoFinanceiro
+-- -----------------------------------------------------
+CREATE SCHEMA IF NOT EXISTS `planjamentoFinanceiro` DEFAULT CHARACTER SET utf8 ;
+USE `planjamentoFinanceiro` ;
+
+-- -----------------------------------------------------
+-- Table `planjamentoFinanceiro`.`Usuario`
+-- -----------------------------------------------------
+CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Usuario` (
+  `idUsuario` INT NOT NULL,
+  `Nome` VARCHAR(45) NOT NULL,
+  `emial` VARCHAR(45) NOT NULL,
+  `senha` VARCHAR(45) NOT NULL,
+  `rg` VARCHAR(45) NOT NULL,
+  `cpf` VARCHAR(45) NOT NULL,
+  `sexo` ENUM('MASCULINO', 'FEMININO') NOT NULL,
+  PRIMARY KEY (`idUsuario`))
+ENGINE = InnoDB;
+
+
+-- -----------------------------------------------------
+-- Table `planjamentoFinanceiro`.`Movimentacao`
+-- -----------------------------------------------------
+CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Movimentacao` (
+  `idMovimentacao` INT NOT NULL,
+  `valor` DOUBLE NOT NULL,
+  `descricao` VARCHAR(45) NOT NULL,
+  `Usuario_idUsuario` INT NOT NULL,
+  `tipo` ENUM('Receita', 'Desoesa') NOT NULL,
+  `tipoReceita` ENUM('SALARIO', 'OUTROS') NOT NULL,
+  `tipoDespesa` ENUM('ACADEMIA', 'AGUA', 'ALUGUEL', 'CLUBE', 'INTERNET', 'TELEFONE', 'LUZ', 'SUPERMERCADO', 'OUTROS') NULL,
+  `Movimentacaocol` VARCHAR(45) NULL,
+  PRIMARY KEY (`Usuario_idUsuario`, `idMovimentacao`),
+  INDEX `fk_Movimentacao_Usuario_idx` (`Usuario_idUsuario` ASC),
+  CONSTRAINT `fk_Movimentacao_Usuario`
+    FOREIGN KEY (`Usuario_idUsuario`)
+    REFERENCES `planjamentoFinanceiro`.`Usuario` (`idUsuario`)
+    ON DELETE NO ACTION
+    ON UPDATE NO ACTION)
+ENGINE = InnoDB;
+
+
+-- -----------------------------------------------------
+-- Table `planjamentoFinanceiro`.`Data`
+-- -----------------------------------------------------
+CREATE TABLE IF NOT EXISTS `planjamentoFinanceiro`.`Data` (
+  `idData` INT NOT NULL,
+  `dia` INT NULL,
+  `mes` INT NULL,
+  `ano` INT NULL,
+  `Datacol` VARCHAR(45) NULL,
+  `Movimentacao_idMovimentacao` INT NOT NULL,
+  `Movimentacao_Usuario_idUsuario` INT NOT NULL,
+  `Usuario_idUsuario` INT NOT NULL,
+  PRIMARY KEY (`idData`),
+  INDEX `fk_Data_Movimentacao1_idx` (`Movimentacao_idMovimentacao` ASC, `Movimentacao_Usuario_idUsuario` ASC),
+  INDEX `fk_Data_Usuario1_idx` (`Usuario_idUsuario` ASC),
+  CONSTRAINT `fk_Data_Movimentacao1`
+    FOREIGN KEY (`Movimentacao_idMovimentacao` , `Movimentacao_Usuario_idUsuario`)
+    REFERENCES `planjamentoFinanceiro`.`Movimentacao` (`idMovimentacao` , `Usuario_idUsuario`)
+    ON DELETE NO ACTION
+    ON UPDATE NO ACTION,
+  CONSTRAINT `fk_Data_Usuario1`
+    FOREIGN KEY (`Usuario_idUsuario`)
+    REFERENCES `planjamentoFinanceiro`.`Usuario` (`idUsuario`)
+    ON DELETE NO ACTION
+    ON UPDATE NO ACTION)
+ENGINE = InnoDB;
+
+
+SET SQL_MODE=@OLD_SQL_MODE;
+SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
+SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
diff --git a/src/implementacoes/Uso.java b/src/implementacoes/Uso.java
index 77476ba..be6aefa 100644
--- a/src/implementacoes/Uso.java
+++ b/src/implementacoes/Uso.java
@@ -1,24 +1,24 @@
-package implementacoes;
-
-public class Uso {
-
-	public static void main(String[] args) {
-		// TODO Auto-generated method stub
-		BancoDeDados bd = new BancoDeDados();
-		try {
-			bd.conectar();
-			if(bd.isConectado()) {
-				System.out.println("Conectei ao banco de dados");
-			}else {
-				System.out.println("Não foi possível conectar ao banco de dados");
-			}
-			Usuario _usuario = new Usuario("N", Sexo.FEMININO, new Data("1/1/1995"), "3434607", "14863325797", "onat@gmail.com",
-			"skxk");
-			bd.inserirContato(_usuario);
-		}catch (Exception e) {
-			System.out.println("Erro: " + e.getMessage());
-		}
-		
-	}
-
-}
+package implementacoes;
+
+public class Uso {
+
+	public static void main(String[] args) {
+	
+		BancoDeDados bd = new BancoDeDados();
+		try {
+			bd.conectar();
+			if(bd.isConectado()) {
+				System.out.println("Conectei ao banco de dados");
+			}else {
+				System.out.println("Não foi possível conectar ao banco de dados");
+			}
+			Usuario _usuario = new Usuario("N", Sexo.FEMININO, new Data("1/1/1995"), "3434607", "14863325797", "onat@gmail.com",
+			"skxk");
+			bd.inserirContato(_usuario);
+		}catch (Exception e) {
+			System.out.println("Erro: " + e.getMessage());
+		}
+		
+	}
+
+}
diff --git a/src/view/teste.java b/src/view/teste.java
index 59b8f99..51cb20f 100644
--- a/src/view/teste.java
+++ b/src/view/teste.java
@@ -1,42 +1,42 @@
-package view;
-
-import java.awt.BorderLayout;
-import java.awt.EventQueue;
-
-import javax.swing.JFrame;
-import javax.swing.JPanel;
-import javax.swing.border.EmptyBorder;
-
-public class teste extends JFrame {
-
-	private JPanel contentPane;
-
-	/**
-	 * Launch the application.
-	 */
-	public static void main(String[] args) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					teste frame = new teste();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame.
-	 */
-	public teste() {
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		setBounds(100, 100, 450, 300);
-		contentPane = new JPanel();
-		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
-		contentPane.setLayout(new BorderLayout(0, 0));
-		setContentPane(contentPane);
-	}
-
-}
+package view;
+
+import java.awt.BorderLayout;
+import java.awt.EventQueue;
+
+import javax.swing.JFrame;
+import javax.swing.JPanel;
+import javax.swing.border.EmptyBorder;
+
+public class teste extends JFrame {
+
+	private JPanel contentPane;
+
+	/**
+	 * Launch the application.
+	 */
+	public static void main(String[] args) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					teste frame = new teste();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame.
+	 */
+	public teste() {
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		setBounds(100, 100, 450, 300);
+		contentPane = new JPanel();
+		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
+		contentPane.setLayout(new BorderLayout(0, 0));
+		setContentPane(contentPane);
+	}
+
+}
